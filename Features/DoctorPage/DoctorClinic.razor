@layout DoctorLayout
@page "/DoctorClinic/{clinicId:int}"

@inject IClinicService clinicService
@inject IBookingService bookingService
@inject NavigationManager NavigationManager


    @if (loading)
    {
        <MudText Typo="Typo.body1" Align="Align.Center" Style="color: gray;">Loading clinic information...</MudText>
    }
    else if (clinic != null)
    {
        <MudText Typo="Typo.h4" Align="Align.Center" Style="color: #1B7D84;">
            @clinic.ClincName
        </MudText>

        <MudCard Class="mt-5">
            <MudCardContent>
                <MudGrid>
                    <!-- Clinic Information -->
                    <MudItem xs="12" md="12">
                        <MudText Typo="Typo.body1"><b>Clinic ID:</b> @clinic.CID</MudText>
                        <MudText Typo="Typo.body1"><b>Clinic Name:</b> @clinic.ClincName</MudText>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>

        <!-- Appointments Table -->
        <MudTable Items="@uniqueDates" Bordered="true">
            <ColGroup>
                <col style="width: 150px;" /> <!-- Date column -->
                @foreach (var time in uniqueTimes)
                {
                    <col style="width: 100px;" /> <!-- Time columns -->
                }
            </ColGroup>

            <HeaderContent>
                <MudTh>Date</MudTh>
                @foreach (var time in uniqueTimes)
                {
                    <MudTh>@DateTime.Today.Add(time).ToString("hh:mm tt")</MudTh> <!-- Time formatted as hh:mm tt -->
                }
            </HeaderContent>

            <RowTemplate>
                <MudTd>@context.ToString("dd/MM/yyyy")</MudTd> <!-- Display the unique date for this row -->
                @foreach (var time in uniqueTimes)
                {
                    var appointment = appointments.FirstOrDefault(a => a.StartTime == time && a.Date.Date == context);

                    if (appointment == null)
                    {
                        <MudTd>--</MudTd> <!-- Empty cell if no appointment -->
                    }
                    else if (appointment.Staus) 
                    {
                        <MudTd style="color: white; background-color: red;">Booked</MudTd> <!-- Mark as 'Booked' -->
                    }
                    else
                    {
                        <MudTd style="color: green; background-color: lightgreen;">Available</MudTd> <!-- Mark as 'Available' -->
                    }
                }
            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
    else
    {
        <MudText Typo="Typo.body1" Align="Align.Center" Style="color: gray;">No clinic information available.</MudText>
    }


@code {
    [Parameter] public int clinicId { get; set; }

    private HospitalSystemTeamTask.Models.Clinic clinic;
    private bool loading = true;

    private IEnumerable<BookingOutputDTO> appointments = new List<BookingOutputDTO>(); // List of appointments
    private List<TimeSpan> uniqueTimes = new List<TimeSpan>(); // List of unique time slots (columns)
    private List<DateTime> uniqueDates = new List<DateTime>(); // List of unique dates (rows)

    protected override async Task OnInitializedAsync()
    {
        try
        {
            clinic =  clinicService.GetClinicById(clinicId); // Fetch clinic details asynchronously
            loading = false;

            // Load appointments on page initialization
            await LoadAppointments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching clinic info: {ex.Message}");
            loading = false;
        }
    }

    private async Task LoadAppointments()
    {
        try
        {
             appointments = bookingService.GetAllBooking()
                                                .Where(a => a.CID == clinicId)
                                                .ToList();  // Async call to ensure data is fetched

            // Extract unique dates (rows)
            uniqueDates = appointments
                .Select(a => a.Date)  // Use Date field from DTO
                .Distinct()
                .OrderBy(d => d)
                .ToList();

            // Extract unique times (columns)
            uniqueTimes = appointments
                .Select(a => a.StartTime)
                .Distinct()
                .OrderBy(t => t)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading appointments for Clinic {clinicId}: {ex.Message}");
        }
    }
}
