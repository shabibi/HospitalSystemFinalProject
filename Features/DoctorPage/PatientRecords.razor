@page "/PatientRecords/{DoctorId:int}"
@inject NavigationManager NavigationManager
@inject IPatientRecordService patientRecordService
@inject IDoctorService doctrService
<h3 style="color: #1B7D84;">Patient Records</h3>

<div class="d-flex flex-column align-start" style="margin-bottom: 30px; width: 300px;">
    <!-- Input for Patient ID -->
    <MudTextField T="int" Label="Enter Patient ID" Variant="Variant.Filled"
    Style="width: 100%; margin-bottom: 10px;"
    @bind-Value="EnteredPatientId"
    Adornment="Adornment.Start"
    AdornmentIcon="@Icons.Material.Filled.Person" />

    <!-- Button under the input box -->
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FetchPatientRecordById"
    Style="background-color: #1B7D84; color: white; font-size: 1rem; padding: 10px 10px; width: 100%; margin-bottom: 20px;">
        Fetch Patient Record
    </MudButton>

    <!-- Add New Patient Record Button -->
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToAddPatientRecord"
    Style="background-color: #1B7D84; color: white; font-size: 1rem; padding: 10px 10px; width: 100%; margin-bottom: 20px;">
        Add New Patient Record
    </MudButton>

    <!-- Select Appointment Button -->
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToSelectAppointment"
    Style="background-color: #1B7D84; color: white; font-size: 1rem; padding: 10px 10px; width: 100%;">
        Select Appointment
    </MudButton>
</div>





@if (errorMessage != null)
{
    <div class="alert alert-danger text-center" style="margin-top: 20px;">
        @errorMessage
    </div>
}
else if (!filteredPatientRecords.Any())
{
    <div class="alert alert-warning text-center" style="margin-top: 20px;">
        No records found.
    </div>
}
else
{
    <MudTable Items="@filteredPatientRecords" Hover="true" SortLabel="Sort By" Style="width: 100%; margin-top: 50px;">
        <HeaderContent>
            <MudTh Style="background-color: #1B7D84; color: white; width: 10%;">Record ID</MudTh>
            <MudTh Style="background-color: #1B7D84; color: white; width: 20%;">Patient Name</MudTh>
            <MudTh Style="background-color: #1B7D84; color: white; width: 20%;">Doctor Name</MudTh>
            <MudTh Style="background-color: #1B7D84; color: white; width: 15%;">Visit Date</MudTh>
            <MudTh Style="background-color: #1B7D84; color: white; width: 15%;">Treatment</MudTh>
            <MudTh Style="background-color: #1B7D84; color: white; width: 15%;">Inspection</MudTh>
            <MudTh Style="background-color: #1B7D84; color: white; width: 10%;">Edit</MudTh>
            <MudTh Style="background-color: #1B7D84; color: white; width: 10%;">Delete</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Record ID" Style="width: 10%;">@context.RecordId</MudTd>
            <MudTd DataLabel="Patient Name" Style="width: 20%;">@context.PatientName</MudTd>
            <MudTd DataLabel="Doctor Name" Style="width: 20%;">@context.DoctorName</MudTd>
            <MudTd DataLabel="Visit Date" Style="width: 15%;">@context.VisitDate.ToShortDateString()</MudTd>
            <MudTd DataLabel="Treatment" Style="width: 15%;">@context.Treatment</MudTd>
            <MudTd DataLabel="Inspection" Style="width: 15%;">@context.Inspection</MudTd> <!-- New Column -->
            <MudTd DataLabel="Edit" Style="width: 10%;">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="() => NavigateToEdit(context.RecordId)" />
            </MudTd>
            <MudTd DataLabel="Delete" Style="width: 10%;">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteRecord(context.RecordId)" />
            </MudTd>
        </RowTemplate>
    </MudTable>

}

@code {
    [Parameter]
    public int DoctorId { get; set; }

    private IEnumerable<PatientRecordOutput> patientRecords = new List<PatientRecordOutput>();
    private IEnumerable<PatientRecordOutput> filteredPatientRecords = new List<PatientRecordOutput>();
    private int EnteredPatientId { get; set; }

    private string errorMessage = null;

    private async Task FetchPatientRecordById()
    {
        if (EnteredPatientId == null)
        {
            errorMessage = "Please enter a valid Patient ID.";
            return;
        }

        errorMessage = null;

        try
        {
            // Fetch patient-specific records
            patientRecords = await Task.Run(() => patientRecordService.GetRecords(EnteredPatientId));
            filteredPatientRecords = patientRecords;

            if (!filteredPatientRecords.Any())
            {
                errorMessage = $"No records found for Patient ID: {EnteredPatientId}.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching patient records: {ex.Message}";
        }

    }

    private void NavigateToEdit(int recordId)
    {
        NavigationManager.NavigateTo($"/EditPatientRecord/{recordId}");
    }

    private void DeleteRecord(int recordId)
    {
        var recordToDelete = patientRecords.FirstOrDefault(r => r.RecordId == recordId);
        if (recordToDelete != null)
        {
            // Simulate deletion
            patientRecords = patientRecords.Where(r => r.RecordId != recordId).ToList();
            filteredPatientRecords = patientRecords;
            StateHasChanged();
        }
    }

    private void NavigateToAddPatientRecord()
    {
        NavigationManager.NavigateTo($"/AddPatientRecord/{EnteredPatientId}/{DoctorId}");
    }
    private void NavigateToSelectAppointment()
    {
        int ? clinicId = doctrService.GetDoctorById(DoctorId).CID;
        if(clinicId != 0)
        {

            // Redirect the user to the SelectAppointment page, passing both PatientId and DoctorId as parameters
            NavigationManager.NavigateTo($"/DoctorSelectAppointment/{EnteredPatientId}/{DoctorId}/{clinicId}");
        }
    }


}
