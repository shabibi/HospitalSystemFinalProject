@page "/BranchPage"
@inject IBranchService branchService
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Large" Class="my-5">
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4" Style="color: #1B7D84;">
        Branches
    </MudText>

    <MudGrid Spacing="3" Justify="Justify.Center">
        @if (branches != null && branches.Any())
        {
            @foreach (var branch in branches)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Class="text-center">
                        <MudCardMedia Image="@GetBranchImage(branch.BranchName)" Alt="@branch.BranchName" Style="height: 300px; width: 100%; object-fit: contain;" />
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Class="text-center">@branch.BranchName.ToUpper()</MudText>
                            <MudText Typo="Typo.body2" Class="text-center">@branch.Location</MudText>
                        </MudCardContent>
                        <MudCardActions Class="justify-center">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ShowDetails(branch.BID)">
                                View Details
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            <MudText Typo="Typo.body1">No branches available.</MudText>
        }
    </MudGrid>
</MudContainer>

@code {
    private Branch selectedBranch;
    private List<Branch> branches;

    protected override void OnInitialized()
    {
        Log.Information("Navigated to BranchPage at {Time}", DateTime.Now);

        try
        {
            Log.Information("Fetching all branches at {Time}", DateTime.Now);
            branches = branchService.GetAllBranches().ToList();
            Log.Information("Successfully fetched {Count} branches at {Time}", branches.Count, DateTime.Now);
        }
        catch (Exception ex)
        {
            Log.Error("Error fetching branches. Error: {Error} at {Time}", ex.Message, DateTime.Now);
        }
    }

    private void ShowDetails(int branchId)
    {
        Log.Information("Navigating to BranchDepartmentPage for Branch ID: {BranchId} at {Time}", branchId, DateTime.Now);
        Navigation.NavigateTo($"/BranchDepartmentPage/{branchId}");
    }

    private string GetBranchImage(string branchName)
    {
        try
        {
            Log.Information("Getting branch image for branch: {BranchName} at {Time}", branchName, DateTime.Now);

            string imagesFolder = Path.Combine("wwwroot", "images");
            string[] availableImages = Directory.GetFiles(imagesFolder, "*.png");

            foreach (var imagePath in availableImages)
            {
                string imageName = Path.GetFileNameWithoutExtension(imagePath).ToLower();
                if (branchName.ToLower().Contains(imageName))
                {
                    Log.Information("Match found for branch image: {ImageName} at {Time}", imageName, DateTime.Now);
                    return $"images/{Path.GetFileName(imagePath)}";
                }
            }

            Log.Warning("No match found for branch image. Falling back to default image for branch: {BranchName} at {Time}", branchName, DateTime.Now);
        }
        catch (Exception ex)
        {
            Log.Error("Error retrieving branch image for branch: {BranchName}. Error: {Error} at {Time}", branchName, ex.Message, DateTime.Now);
        }

        return "images/default.png";
    }

    Func<Branch, string> converter = branch => branch?.BranchName ?? "Find Branch";
}
