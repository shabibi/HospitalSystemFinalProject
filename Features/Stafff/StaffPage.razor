@page "/StaffPage/{UserId:int}"
@inject IUserService UserService


@if (UserDetails == null)
{
    <p>Loading staff details...</p>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="my-5">

    <MudCard Class="my-5">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="4" Class="d-flex justify-center align-center">
                    <div style="width: 100%; max-width: 150px; height: auto; overflow: hidden;">
                        <img src="@GetProfileImage(UserDetails.Image)"
                             alt="@UserDetails.UserName"
                             style="width: 100%; height: auto; border-radius: 4px; border: 1px solid #ccc;" />
                    </div>
                </MudItem>
                <MudItem xs="12" md="8">
                    <MudText Typo="Typo.h6"><b>Name:</b> @UserDetails.UserName</MudText>
                    <MudText Typo="Typo.body1"><b>Email:</b> @UserDetails.Email</MudText>
                    <MudText Typo="Typo.body1"><b>Phone:</b> @UserDetails.Phone</MudText>
                    <MudText Typo="Typo.body1"><b>Role:</b> @UserDetails.Role</MudText>
                    <MudText Typo="Typo.body1" Style="@GetStatusStyle(UserDetails.IsActive)">
                        <b>Status:</b> @(UserDetails.IsActive ? "Active" : "Inactive")
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
    </MudContainer>
}

@code {
    [Parameter]
    public int UserId { get; set; } 
    private UserOutputDTO UserDetails { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch user details by ID (replace `1` with your actual logic for fetching specific user)
            UserDetails = await Task.FromResult(GetUserById(UserId));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user: {ex.Message}");
        }
    }

    private UserOutputDTO GetUserById(int uid)
    {
        var user = UserService.GetUserById(uid); // Adjust method call to suit your IUserService
        return new UserOutputDTO
            {
                UID = user.UID,
                UserName = user.UserName,
                Email = user.Email,
                Phone = user.Phone,
                Role = user.Role,
                IsActive = user.IsActive,
                Image = user.image
            };
    }

    private string GetProfileImage(string imagePath)
    {
        return string.IsNullOrEmpty(imagePath) ? "/Images/Users/SuperAdmins/admin.png" : $"/Images/{imagePath}";
    }

    private string GetStatusStyle(bool isActive)
    {
        return isActive ? "color: green;" : "color: red;";
    }
}
