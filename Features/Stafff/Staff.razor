

@page "/Staff"

<!-- Add New Staff Button Positioned on the Right -->
<div class="d-flex justify-end" style="margin-bottom: 30px;"> <!-- Increased margin-bottom for more space -->
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToAddStaff"
    Style="background-color: #1B7D84; color: white; font-size: 1rem; padding: 10px 10px;">
        Add New Staff
    </MudButton>
</div>

<!-- Search Box -->
<MudTextField T="string"
Placeholder="Search for User"
ValueChanged="@OnSearchChanged"
Immediate="true"
Adornment="Adornment.End"
AdornmentIcon="@Icons.Material.Filled.Search"
Class="mb-4"
Variant="Variant.Filled"
Style="margin-bottom: 20px;" />

<!-- Staff Table -->
<MudTable Items="@filteredUsers" Hover="true" SortLabel="Sort By" Style="width: 100%; margin-top: 50px;">
    <HeaderContent>
        <MudTh Style="background-color: #1B7D84; color: white; width: 10%;">User ID</MudTh>
        <MudTh Style="background-color: #1B7D84; color: white; width: 20%;">Name</MudTh>
        <MudTh Style="background-color: #1B7D84; color: white; width: 15%;">Role</MudTh>
        <MudTh Style="background-color: #1B7D84; color: white; width: 15%;">Status</MudTh>
        <MudTh Style="background-color: #1B7D84; color: white; width: 15%;">View</MudTh>
        <MudTh Style="background-color: #1B7D84; color: white; width: 15%;">Edit</MudTh>
        <MudTh Style="background-color: #1B7D84; color: white; width: 15%;">Inactivate</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="User ID" Style="background-color: #1B7D84; color: white; width: 10%;">@context.UID</MudTd>
        <MudTd DataLabel="Name" Style="width: 20%;">@context.UserName</MudTd>
        <MudTd DataLabel="Role" Style="width: 15%;">@context.Role</MudTd>
        <MudTd DataLabel="Status" Style="@GetStatusStyle(context.IsActive)">
            @(context.IsActive ? "Active" : "Inactive")
        </MudTd>
        <MudTd DataLabel="View" Style="width: 15%;">
            <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Primary" OnClick="() => NavigateToView(context.UID)" />
        </MudTd>
        <MudTd DataLabel="Edit" Style="width: 15%;">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="() => NavigateToEdit(context.UID)" />
        </MudTd>
        <MudTd DataLabel="Inactivate" Style="width: 15%;">
            <MudIconButton Icon="@(context.IsActive ? Icons.Material.Filled.Block : Icons.Material.Filled.CheckCircle)" 
            Color="@(context.IsActive ? Color.Error : Color.Success)" 
            OnClick="() => ToggleUserStatus(context.UID, context.IsActive)" />
        </MudTd>
    </RowTemplate>
</MudTable>

<MudSnackbar />

@code {
    private IEnumerable<UserOutputDTO> users;
    private IEnumerable<UserOutputDTO> filteredUsers;
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            var superAdmins = userService.GetUserByRole("superAdmin");
            var admins = userService.GetUserByRole("admin");
            var doctors = userService.GetUserByRole("doctor");

            users = superAdmins.Concat(admins).Concat(doctors).ToList();
            filteredUsers = users;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private void OnSearchChanged(string search)
    {
        searchQuery = search;

        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredUsers = users;
        }
        else
        {
            filteredUsers = users.Where(u =>
                u.UserName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                u.Role.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private void NavigateToView(int userId)
    {
        var staffRole = userService.GetUserById(userId).Role.ToLower();
        if(staffRole =="admin" || staffRole == "superadmin"){
            NavigationManager.NavigateTo($"/StaffPage/{userId}");
        }
        else
        {
            NavigationManager.NavigateTo($"/ViewDoctors/{userId}");
        }
        
    }

    private void NavigateToEdit(int userId)
    {
        // Implement navigation logic for editing user details
    }

    private void ToggleUserStatus(int userId, bool isActive)
    {
        var userToUpdate = users.FirstOrDefault(u => u.UID == userId);
        if (userToUpdate != null)
        {
            userToUpdate.IsActive = !isActive;
            filteredUsers = users.ToList();
            StateHasChanged(); // Force UI update
        }
    }

    private void NavigateToAddStaff()
    {
        NavigationManager.NavigateTo("/AddStaff");
    }

    private string GetStatusStyle(bool isActive)
    {
        return isActive ? "color: green;" : "color: red;"; // Red for Inactive, Green for Active
    }
}
