@page "/AddBranch/{BranchId:int?}"

<MudContainer MaxWidth="MaxWidth.Medium" Class="my-5" Style="display: flex; flex-direction: column; align-items: center;">
    <MudText Typo="Typo.h4" Align="Align.Center" Style="color: #1B7D84; margin-bottom: 20px;">
        @(BranchId.HasValue ? "Edit Branch" : "Add Branch")
    </MudText>

    <MudCard Style="width: 100%;">
            <!-- Pass branchModel, BranchId and methods to the child component -->
            <AddBranchForm BranchModel="@branchModel"
                           BranchId="@BranchId"
                           OnValidSubmit="SaveBranch"
                           OnCancel="Cancel"
                           IsFormValid="@isFormValid" />
    </MudCard>
</MudContainer>

@code {
    [Parameter] public int? BranchId { get; set; }
    private BranchDTO branchModel = new();
    private bool isFormValid;

    protected override async Task OnInitializedAsync()
    {
        if (BranchId.HasValue)
        {
            try
            {
                branchModel = BranchService.GetBranchById(BranchId.Value);
            }
            catch (Exception ex)
            {
                Log.Error("Error fetching branch details for Branch ID: {BranchId}. Error: {Error} at {Time}", BranchId, ex.Message, DateTime.Now);
                NavigationManager.NavigateTo("/ManageBranch");
            }
        }
    }

    // Logic for saving the branch
    private async Task SaveBranch()
    {
        try
        {
            if (BranchId.HasValue)
            {
                BranchService.UpdateBranch(BranchId.Value, branchModel);
                Snackbar.Add("Branch updated successfully.", Severity.Success);
                Log.Information("Successfully updated branch with ID: {BranchId} at {Time}", BranchId, DateTime.Now);
            }
            else
            {
                BranchService.AddBranch(branchModel);
                Snackbar.Add("Branch added successfully.", Severity.Success);
                Log.Information("Successfully added a new branch at {Time}", DateTime.Now);
            }

            NavigationManager.NavigateTo("/ManageBranch");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            Log.Error("Error saving branch: {Error} at {Time}", ex.Message, DateTime.Now);
        }
    }

    // Logic for cancel
    private void Cancel()
    {
        Log.Information("Cancelled Add/Edit Branch operation at {Time}", DateTime.Now);
        NavigationManager.NavigateTo("/ManageBranch");
    }
}
