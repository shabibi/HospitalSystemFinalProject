
@page "/ViewAllClinicAppointments/{clinicId:int}"

@inject IBookingService bookingService
@inject IClinicService clinicService

<h3>Appointments for Clinic @clinicId - @clinicName</h3> <!-- Display clinic name here -->

<MudTable Items="@uniqueDates" Bordered="true">
    <ColGroup>
        <col style="width: 150px;" /> <!-- Date column -->
        @foreach (var time in uniqueTimes)
        {
            <col style="width: 100px;" /> <!-- Time columns -->
        }
    </ColGroup>

    <HeaderContent>
        <MudTh>Date</MudTh>
        @foreach (var time in uniqueTimes)
        {
            <MudTh>@DateTime.Today.Add(time).ToString("hh:mm tt")</MudTh> <!-- Time formatted as hh:mm tt -->
        }
    </HeaderContent>

    <RowTemplate>
        <MudTd>@context.ToString("dd/MM/yyyy")</MudTd> <!-- Display the unique date for this row -->
        @foreach (var time in uniqueTimes)
        {
            var appointment = appointments.FirstOrDefault(a => a.StartTime == time && a.Date.Date == context);

            if (appointment == null)
            {
                <MudTd>--</MudTd> <!-- Empty cell if no appointment -->
            }
            else if (appointment.Staus)
            {
                <MudTd style="color: white; background-color: red;">Booked</MudTd> <!-- Mark as 'Booked' -->
            }
            else
            {
                <MudTd style="color: green; background-color: lightgreen;">Available</MudTd> <!-- Mark as 'Available' -->
            }
        }
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public int clinicId { get; set; } // Clinic ID passed via URL
    private string clinicName = ""; // Clinic name

    private IEnumerable<BookingOutputDTO> appointments = new List<BookingOutputDTO>(); // List of appointments
    private List<TimeSpan> uniqueTimes = new List<TimeSpan>(); // List of unique time slots (columns)
    private List<DateTime> uniqueDates = new List<DateTime>(); // List of unique dates (rows)

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Log.Information("Initializing ViewAllClinicAppointments page for Clinic ID: {ClinicId}", clinicId);
            await LoadAppointments(); // Load appointments on page initialization
            await LoadClinicName();   // Load clinic name
        }
        catch (Exception ex)
        {
            Log.Error("Error initializing ViewAllClinicAppointments page for Clinic ID: {ClinicId}. Error: {ErrorMessage}", clinicId, ex.Message);
        }
    }

    private async Task LoadAppointments()
    {
        try
        {
            Log.Information("Loading appointments for Clinic ID: {ClinicId}", clinicId);
            appointments = bookingService.GetAllBooking()
                                         .Where(a => a.CID == clinicId)
                                         .ToList();

            // Extract unique dates (rows)
            uniqueDates = appointments
                .Select(a => a.Date)  // Use Date field from DTO
                .Distinct()
                .OrderBy(d => d)
                .ToList();

            // Extract unique times (columns)
            uniqueTimes = appointments
                .Select(a => a.StartTime)
                .Distinct()
                .OrderBy(t => t)
                .ToList();

            Log.Information("Successfully loaded {Count} appointments for Clinic ID: {ClinicId}", appointments.Count(), clinicId);
        }
        catch (Exception ex)
        {
            Log.Error("Error loading appointments for Clinic ID: {ClinicId}. Error: {ErrorMessage}", clinicId, ex.Message);
        }
    }

    private async Task LoadClinicName()
    {
        try
        {
            Log.Information("Loading clinic name for Clinic ID: {ClinicId}", clinicId);
            var clinic = clinicService.GetClinicById(clinicId); // Assuming you have this method in the service
            if (clinic != null)
            {
                clinicName = clinic.ClincName; // Replace with actual property for clinic name
                Log.Information("Loaded clinic name: {ClinicName} for Clinic ID: {ClinicId}", clinicName, clinicId);
            }
            else
            {
                Log.Warning("Clinic not found for Clinic ID: {ClinicId}", clinicId);
            }
        }
        catch (Exception ex)
        {
            Log.Error("Error loading clinic name for Clinic ID: {ClinicId}. Error: {ErrorMessage}", clinicId, ex.Message);
        }
    }
}
