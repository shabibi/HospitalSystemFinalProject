@page "/BranchDepartmentPage/{branchId:int}"
@inject IBranchDepartmentService BranchDepartmentService
@inject IBranchService BranchService
@inject NavigationManager NavigationManager
 

<h3>@branchName.ToUpper() DEPARTMENTS</h3>

@if (departments == null)
{
    <p>Loading departments...</p>
}
else if (!departments.Any())
{
    <p>No departments found for this branch.</p>
}
else
{
    <MudGrid Spacing="3" Justify="Justify.Center">
        @foreach (var department in departments)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="3" Class="ma-3" Style="width: 70%; height: 320px; display: flex; flex-direction: column; align-items: center; text-align: center;">
                    <!-- Circular Image Container at the top -->
                    <div style="width: 120px; height: 120px; display: flex; align-items: center; justify-content: center; overflow: hidden; border-radius: 50%; border: 2px solid #ccc; margin-top: 1rem;">
                        <MudCardMedia Image="@GetDepartmentImage(department.DepartmentName)"
                                      Alt="@department.DepartmentName"
                                      Style="width: 100%; height: 100%; object-fit: cover;" />
                    </div>

                    <!-- Department Name and Description, moved up slightly -->
                    <MudCardContent Style="text-align: center; margin-top: 0.5rem;">
                        <MudText Typo="Typo.h6">@department.DepartmentName.ToUpper()</MudText>
                        <MudText Style="font-size: 0.85rem; margin-top: 0.5rem;">
                            @(!string.IsNullOrEmpty(department.Description) ? department.Description : "No description available.")
                        </MudText>
                    </MudCardContent>

                    <!-- Find Doctor Button, placed at the bottom -->
                    <MudCardActions Style="margin-top: auto; padding-bottom: 1rem;">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => NavigateToFindDoctor(department.DepId, branchId)">
                            Find Doctor
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Parameter]
    public int branchId { get; set; }

    private List<DepDTO> departments;
    private string branchName = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        
        
        
        
        Information("Navigated to BranchDepartmentPage for Branch ID: {BranchId} at {Time}", branchId, DateTime.Now);

        try
        {
            Log.Information("Fetching branch details for Branch ID: {BranchId} at {Time}", branchId, DateTime.Now);
            var branch = BranchService.GetBranchById(branchId);
            branchName = branch?.BranchName ?? "Unknown Branch";
            Log.Information("Successfully fetched branch details for Branch ID: {BranchId} at {Time}", branchId, DateTime.Now);

            Log.Information("Fetching departments for Branch ID: {BranchId} at {Time}", branchId, DateTime.Now);
            departments = BranchDepartmentService.GetDepartmentsByBranch(branchId).ToList();
            Log.Information("Successfully fetched {Count} departments for Branch ID: {BranchId} at {Time}", departments.Count, branchId, DateTime.Now);
        }
        catch (Exception ex)
        {
            Log.Error("Error fetching departments or branch for Branch ID: {BranchId}. Error: {Error} at {Time}", branchId, ex.Message, DateTime.Now);
            branchName = "Error Loading Branch";
            departments = new List<DepDTO>();
        }
    }

    private string GetDepartmentImage(string departmentName)
    {
        try
        {
            Log.Information("Getting department image for department: {DepartmentName} at {Time}", departmentName, DateTime.Now);

            string imagesFolder = Path.Combine("wwwroot", "images", "IconDep");
            if (!Directory.Exists(imagesFolder))
            {
                Log.Warning("IconDep folder does not exist at {Time}", DateTime.Now);
                return "images/IconDep/defultDep.png";
            }

            string[] availableImages = Directory.GetFiles(imagesFolder, "*.png");
            foreach (var imagePath in availableImages)
            {
                string imageName = Path.GetFileNameWithoutExtension(imagePath).ToLower();
                if (departmentName.ToLower().Contains(imageName))
                {
                    Log.Information("Match found for department image: {ImageName} at {Time}", imageName, DateTime.Now);
                    return $"images/IconDep/{Path.GetFileName(imagePath)}";
                }
            }
        }
        catch (Exception ex)
        {
            Log.Error("Error accessing images for department: {DepartmentName}. Error: {Error} at {Time}", departmentName, ex.Message, DateTime.Now);
        }

        Log.Warning("Fallback to default image for department: {DepartmentName} at {Time}", departmentName, DateTime.Now);
        return "images/IconDep/defultDep.png"; // Fallback image
    }

    private void NavigateToFindDoctor(int departmentId, int branchId)
    {
        Log.Information("Navigating to find doctor page for Branch ID: {BranchId} and Department ID: {DepartmentId} at {Time}", branchId, departmentId, DateTime.Now);
        NavigationManager.NavigateTo($"/BranchDepartmentDoctors/{branchId}/{departmentId}");
    }
}
