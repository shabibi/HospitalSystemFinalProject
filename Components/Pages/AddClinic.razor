@layout StaffLayout

@page "/AddClinic"
@inject IUserService userService // Inject UserService to fetch doctors
@inject IClinicService clinicService
@inject NavigationManager NavigationManager
@inject IDoctorService doctorService
@inject ISnackbar Snackbar // Inject the ISnackbar service

<h3>Add Clinic</h3>

<MudPaper Elevation="4" Class="p-4">
    <MudForm Model="clinicInput" @ref="form" Valid="isFormValid" OnValidSubmit="SubmitForm">
        <!-- Clinic Name Input -->
        <MudTextField Label="Clinic Name" @bind-Value="clinicInput.ClincName" Required="true" />

        <!-- Assign Doctor Dropdown -->
        <MudSelect T="int" Label="Assign Doctor" @bind-Value="clinicInput.AssignDoctor" Required="true">
            @foreach (var doctor in doctors)
            {
                var user = users.FirstOrDefault(u => u.UID == doctor.DID);
                var userName = user?.UserName ?? "Unknown User";

                <MudSelectItem T="int" Value="user.UID">
                    @userName
                </MudSelectItem>
            }
        </MudSelect>

        <!-- Slot Duration Input -->
        <MudTextField Label="Slot Duration (in minutes)" @bind-Value="clinicInput.SlotDuration"
                      Required="true" Type="number"
                      Validation="(Func<int, string>)ValidatePositiveNumber" />

        <!-- Start Time Dropdown -->
        <MudSelect T="TimeSpan" Label="Start Time" @bind-Value="clinicInput.StartTime" Required="true">
            @foreach (var time in availableTimes)
            {
                <MudSelectItem T="TimeSpan" Value="@time">
                    @time.ToString(@"hh\:mm\:ss")
                </MudSelectItem>
            }
        </MudSelect>

        <!-- End Time Dropdown -->
        <MudSelect T="TimeSpan" Label="End Time" @bind-Value="clinicInput.EndTime" Required="true">
            @foreach (var time in availableTimes)
            {
                <MudSelectItem T="TimeSpan" Value="@time">
                    @time.ToString(@"hh\:mm\:ss")
                </MudSelectItem>
            }
        </MudSelect>

        <!-- Cost Input -->
        <MudTextField Label="Cost (in $)" @bind-Value="clinicInput.Cost" Required="true" Type="number" />

        <!-- Submit and Cancel Buttons -->
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitForm" Disabled="!form.IsValid">
            Submit
        </MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="NavigateBack">
            Cancel
        </MudButton>
    </MudForm>

</MudPaper>

@code {
    private ClinicInput clinicInput = new();
    private MudForm form;
    private bool isFormValid = false;

    private List<Doctor> doctors = new List<Doctor>(); // Ensure it's initialized as an empty list
    private List<UserOutputDTO> users = new List<UserOutputDTO>();
    private List<TimeSpan> availableTimes;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch doctors and users
            var doctorsResult = doctorService.GetAllDoctors().Where(u => u.CID == null); // Only fetch doctors without clinics
            var userRole = userService.GetUserByRole("doctor");

            if (doctorsResult != null)
            {
                doctors = doctorsResult.ToList(); // Assign to doctors
                users = userRole.ToList(); // Assign to users
            }
            else
            {
                doctors = new List<Doctor>(); // In case no doctors found, assign an empty list
                users = new List<UserOutputDTO>(); // Ensure users is also empty
            }

            // Generate available times after data is loaded
            availableTimes = GenerateAvailableTimes();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error while loading doctors: {ex.Message}", Severity.Error);
        }
    }

    private async Task SubmitForm()
    {
        if (form.IsValid) // Check if the form is valid
        {
            try
            {
                 clinicService.AddClinic(clinicInput); // Assuming it's an async method
                Snackbar.Add("Clinic added successfully!", Severity.Success);

                // Wait for success message to be visible
                await Task.Delay(2000);

                // Redirect to clinics list
                NavigationManager.NavigateTo("/AddClinic");
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error adding clinic: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Please fill out all required fields.", Severity.Warning);
        }
    }
    private string ValidatePositiveNumber(int value)
    {
        return value > 0 ? null : "Slot duration must be a positive number.";
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/AllClinicsPage");
    }

    // Generate available times (e.g., 9:00 AM to 5:00 PM in 30-minute intervals)
    private List<TimeSpan> GenerateAvailableTimes()
    {
        var times = new List<TimeSpan>();
        var startTime = new TimeSpan(9, 00, 00); // Start at 9:00 AM
        var endTime = new TimeSpan(17, 00, 00);  // End at 5:00 PM
        var interval = new TimeSpan(0, 30, 00); // 30-minute interval

        for (var time = startTime; time < endTime; time = time.Add(interval))
        {
            times.Add(time);
        }

        return times;
    }
}
