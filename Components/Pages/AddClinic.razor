@layout StaffLayout

@page "/AddClinic"
@inject IUserService userService
@inject IClinicService clinicService
@inject NavigationManager NavigationManager
@inject IDoctorService doctorService
@inject ISnackbar Snackbar

<MudPaper Elevation="4" Class="form-container" Style="width: 250%; align-content:center;" Align="Align.Center margin-top: center">
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4" Style="color: #1B7D84;">
        Add Clinic
    </MudText>
    <MudForm Model="clinicInput" @ref="form" Valid="isFormValid" OnValidSubmit="SubmitForm"
             Hover="true" SortLabel="Sort By" Style="width: 100%;">
        <MudItem xs="12" Class="mb-4">
            <!-- Clinic Name Input -->
            <MudTextField Label="Clinic Name" @bind-Value="clinicInput.ClincName" Required="true" FullWidth="true" />
        </MudItem>

        <MudItem xs="12" Class="mb-4">
            <!-- Assign Doctor Dropdown -->
            <MudSelect T="int" Label="Assign Doctor" @bind-Value="clinicInput.AssignDoctor" Required="true" FullWidth="true">
                @foreach (var doctor in doctors)
                {
                    var user = users.FirstOrDefault(u => u.UID == doctor.DID);
                    var userName = user?.UserName ?? "Unknown User";

                    <MudSelectItem T="int" Value="user.UID">
                        @userName
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" Class="mb-4">
            <!-- Slot Duration Input -->
            <MudTextField Label="Slot Duration (in minutes)" @bind-Value="clinicInput.SlotDuration"
                          Required="true" Type="number"
                          Validation="(Func<int, string>)ValidatePositiveNumber" FullWidth="true" />
        </MudItem>

        <MudItem xs="12" Class="mb-4">
            <!-- Start Time Dropdown -->
            <MudSelect T="TimeSpan" Label="Start Time" @bind-Value="clinicInput.StartTime" Required="true" FullWidth="true">
                @foreach (var time in availableTimes)
                {
                    <MudSelectItem T="TimeSpan" Value="@time">
                        @time.ToString(@"hh\:mm\:ss")
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" Class="mb-4">
            <!-- End Time Dropdown -->
            <MudSelect T="TimeSpan" Label="End Time" @bind-Value="clinicInput.EndTime" Required="true" FullWidth="true">
                @foreach (var time in availableTimes)
                {
                    <MudSelectItem T="TimeSpan" Value="@time">
                        @time.ToString(@"hh\:mm\:ss")
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" Class="mb-4">
            <!-- Cost Input -->
            <MudTextField Label="Cost (in $)" @bind-Value="clinicInput.Cost" Required="true" Type="number" FullWidth="true" />
        </MudItem>

        <MudItem xs="12" Class="d-flex justify-space-between mt-4">
            <!-- Submit and Cancel Buttons -->
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitForm" Disabled="!form.IsValid">
                Submit
            </MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="NavigateBack">
                Cancel
            </MudButton>
        </MudItem>
    </MudForm>
</MudPaper>

<style>
    .form-container {
        max-width: 600px;
        margin: auto;
        padding: 20px;
        height: auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 80vh; /* Center vertically */
    }

    .mb-4 {
        margin-bottom: 16px;
    }

    .d-flex {
        display: flex;
    }

    .justify-space-between {
        justify-content: space-between;
    }

    .mt-4 {
        margin-top: 16px;
    }
</style>

@code {
    private ClinicInput clinicInput = new();
    private MudForm form;
    private bool isFormValid = false;

    private List<Doctor> doctors = new List<Doctor>();
    private List<UserOutputDTO> users = new List<UserOutputDTO>();
    private List<TimeSpan> availableTimes;

    protected override async Task OnInitializedAsync()
    {
        Log.Information("User accessed the AddClinic page at {Time}", DateTime.Now);

        try
        {
            var doctorsResult = doctorService.GetAllDoctors().Where(u => u.CID == null);
            var userRole = userService.GetUserByRole("doctor");

            doctors = doctorsResult?.ToList() ?? new List<Doctor>();
            users = userRole?.ToList() ?? new List<UserOutputDTO>();
            availableTimes = GenerateAvailableTimes();
        }
        catch (Exception ex)
        {
            Log.Error("Error while loading doctors: {Error} at {Time}", ex.Message, DateTime.Now);
            Snackbar.Add($"Error while loading doctors: {ex.Message}", Severity.Error);
        }
    }

    private async Task SubmitForm()
    {
        if (form.IsValid)
        {
            try
            {
                Log.Information("User started saving a clinic at {Time}", DateTime.Now);
                clinicService.AddClinic(clinicInput);
                Snackbar.Add("Clinic added successfully!", Severity.Success);
                Log.Information("Clinic added successfully at {Time}", DateTime.Now);

                await Task.Delay(2000);
                NavigationManager.NavigateTo("/AllClinicsPage");
            }
            catch (Exception ex)
            {
                Log.Error("Error adding clinic: {Error} at {Time}", ex.Message, DateTime.Now);
                Snackbar.Add($"Error adding clinic: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Log.Warning("Form submission failed due to validation errors at {Time}", DateTime.Now);
            Snackbar.Add("Please fill out all required fields.", Severity.Warning);
        }
    }

    private string ValidatePositiveNumber(int value) =>
        value > 0 ? null : "Slot duration must be a positive number.";

    private void NavigateBack()
    {
        Log.Information("User canceled adding a clinic at {Time}", DateTime.Now);
        NavigationManager.NavigateTo("/AllClinicsPage");
    }

    private List<TimeSpan> GenerateAvailableTimes()
    {
        var times = new List<TimeSpan>();
        var startTime = new TimeSpan(9, 0, 0);
        var endTime = new TimeSpan(17, 0, 0);
        var interval = new TimeSpan(0, 30, 0);

        for (var time = startTime; time < endTime; time = time.Add(interval))
        {
            times.Add(time);
        }

        return times;
    }
}
