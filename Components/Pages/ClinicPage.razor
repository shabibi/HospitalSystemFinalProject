@layout StaffLayout
@page "/ClinicPage"
@inject IClinicService ClinicService
@inject IBranchService BranchService
@inject IDepartmentService DepartmentService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Medium" Class="my-5" Style=" align-items:center margin-top: 100px;">
    <MudText Typo="Typo.h4" Align="Align.Center" Style="color: #1B7D84;">
        Clinic Management
    </MudText>
    <MudCard Class="mt-5">
        <MudCardContent>
            <MudGrid>
                <!-- Add Clinic Button -->
                <MudItem xs="12">
                    <div class="d-flex justify-end">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddClinic"
                                   Style="background-color: #1B7D84; color: white; font-size: 1rem; padding: 8px 16px;">
                            Add Clinic
                        </MudButton>
                    </div>
                </MudItem>

                <!-- Select Branch -->
                <MudItem xs="12">
                    <MudText Typo="Typo.body1" Style="font-weight: bold; color: #1B7D84;">Select Branch</MudText>
                    <MudSelect T="Branch" @bind-Value="selectedBranch" Variant="Variant.Outlined" Clearable>
                        @foreach (var branch in branches)
                        {
                            <MudSelectItem T="Branch" Value="@branch" Style="font-size: 1rem; font-weight: bold;">
                                @branch.BranchName
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- Select Department -->
                <MudItem xs="12">
                    <MudText Typo="Typo.body1" Style="font-weight: bold; color: #1B7D84;">Select Department</MudText>
                    <MudSelect T="DepDTO" @bind-Value="selectedDepartment" Variant="Variant.Outlined" Clearable>
                        @foreach (var department in departments)
                        {
                            <MudSelectItem T="DepDTO" Value="@department" Style="font-size: 1rem; font-weight: bold;">
                                @department.DepartmentName
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- Find Clinic Button -->
                <MudItem xs="12">
                    <div class="d-flex justify-center mt-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="FindClinic"
                                   Style="background-color: #1B7D84; color: white; font-size: 1rem; padding: 8px 16px;">
                            Find Clinic
                        </MudButton>
                    </div>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private List<Branch> branches = new List<Branch>();
    private List<DepDTO> departments = new List<DepDTO>();
    private Branch selectedBranch;
    private DepDTO selectedDepartment;

    // Fetching Branches and Departments
    protected override void OnInitialized()
    {
        Log.Information("Navigated to ClinicPage at {Time}", DateTime.Now);

        try
        {
            Log.Information("Fetching all branches at {Time}", DateTime.Now);
            branches = BranchService.GetAllBranches().ToList();
            Log.Information("Successfully fetched {Count} branches at {Time}", branches.Count, DateTime.Now);

            Log.Information("Fetching all departments at {Time}", DateTime.Now);
            departments = DepartmentService.GetAllDepartments().ToList();
            Log.Information("Successfully fetched {Count} departments at {Time}", departments.Count, DateTime.Now);
        }
        catch (Exception ex)
        {
            Log.Error("Error fetching branches or departments. Error: {Error} at {Time}", ex.Message, DateTime.Now);
        }
    }

    private void AddClinic()
    {
        Log.Information("Navigating to AddClinic page at {Time}", DateTime.Now);
        NavigationManager.NavigateTo("/AddClinic");
    }

    private void FindClinic()
    {
        if (selectedBranch != null && selectedDepartment != null)
        {
            Log.Information("Navigating to AllClinicsPage for Branch ID: {BranchId} and Department ID: {DepartmentId} at {Time}", selectedBranch.BID, selectedDepartment.DepId, DateTime.Now);
            NavigationManager.NavigateTo($"/AllClinicsPage/{selectedBranch.BID}/{selectedDepartment.DepId}");
        }
        else
        {
            Log.Warning("FindClinic action attempted without selecting both Branch and Department at {Time}", DateTime.Now);
            Console.WriteLine("Please select both branch and department.");
        }
    }

    private void NavigateToAllClinicsPage(int bid, int depId)
    {
        Log.Information("Navigating to AllClinicsPage for Branch ID: {BranchId} and Department ID: {DepartmentId} at {Time}", bid, depId, DateTime.Now);
        NavigationManager.NavigateTo($"/AllClinicsPage/{bid}/{depId}");
    }
}
