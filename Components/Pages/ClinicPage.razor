@layout StaffLayout

@page "/ClinicPage"
@inject IClinicService clinicService
@inject IBranchService branchService
@inject IDepartmentService departmentService

<!-- Button at the Top -->
<div style="margin-top: 0; position: absolute; top: 100px; width: 100%; display: flex; justify-content: center; margin-bottom: 40px;">
    <MudButton Variant="Variant.Filled" DropShadow="true" Color="Color.Primary" OnClick="AddClinic"
               Style="background-color: #1B7D84; color: white; font-size: 1.2rem; padding: 16px 32px;">
        Add Clinic
    </MudButton>
</div>

<!-- Dropdowns for Branch -->
<div style="margin-bottom: 16px; margin-top: 60px;">
    <!-- Custom Label Above the Select Box -->
    <MudText Typo="Typo.h5" Style="font-weight: bold; color: #1B7D84; text-align: left;">Select Branch</MudText>

    <MudSelect T="Branch" @bind-Value="selectedBranch" Variant="Variant.Outlined" Clearable>
        @foreach (var branch in branches)
        {
            <MudSelectItem T="Branch" Value="@branch" Style="font-size: 1.2rem; font-weight: bold;">@branch.BranchName</MudSelectItem>
        }
    </MudSelect>
</div>

<div style="margin-bottom: 16px;">
    <MudText Typo="Typo.h5" Style="font-weight: bold; color: #1B7D84; text-align: left;">Select Department</MudText>
    <MudSelect T="DepDTO" @bind-Value="selectedDepartment" Variant="Variant.Outlined" Clearable>
        @foreach (var department in departments)
        {
            <MudSelectItem T="DepDTO" Value="@department" Style="font-size: 1.2rem;font-weight :bold">@department.DepartmentName</MudSelectItem>
        }
    </MudSelect>
</div>

<div style="margin-top: 0; position: center; top: 100px; width: 100%; display: flex; justify-content: center; margin-bottom: 40px;">
    <MudButton Variant="Variant.Filled" DropShadow="false" Color="Color.Secondary" OnClick="FindClinic"
               Style="background-color: #1B7D84; color: white; font-size: 1.2rem; padding: 16px 32px;">
        Find Clinic
        </MudButton>

</div>


<!-- Display selected Clinic(s) -->
@if (clinics.Any())
{
    <h4>Clinics:</h4>
    <ul>
        @foreach (var clinic in clinics)
        {
            <li>@clinic.ClincName</li>
        }
    </ul>
}
else
{
    <MudText Typo="Typo.h6">No clinics found.</MudText>
}

@code {
    // Data
    private List<Branch> branches = new List<Branch>();
    private List<DepDTO> departments = new List<DepDTO>();
    private List<Clinic> clinics = new List<Clinic>();

    private Branch selectedBranch;
    private DepDTO selectedDepartment;

    // Assuming a service is injected for getting data
    [Inject] private IClinicService ClinicService { get; set; }

    // Fetching Branches and Departments
    protected override void OnInitialized()
    {
        // Simulate fetching branch and department data (replace with actual service call)
        branches = branchService.GetAllBranches().ToList();
        departments = departmentService.GetAllDepartments().ToList();
    }

    private void AddClinic()
    {
        // Logic to add a new clinic (for now, just a log statement)
        Console.WriteLine("Add Clinic clicked");
    }

    private void FindClinic()
    {
        // Get clinics by selected Branch and Department
        if (selectedBranch != null && selectedDepartment != null)
        {
            clinics = ClinicService.GetClinicByBranchDep(selectedBranch.BID, selectedDepartment.DepId).ToList();
        }
    }
}
