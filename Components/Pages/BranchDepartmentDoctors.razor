@page "/BranchDepartmentDoctors/{branchId:int}/{departmentId:int}"
@inject IDoctorService doctorService
@inject IUserService userService

<h3>Doctors in @departmentName</h3>

@if (doctors == null)
{
    <p>Loading doctors...</p>
}
else if (!doctors.Any())
{
    <p>No doctors found in this department.</p>
}
else
{
    <MudGrid Spacing="3" Justify="Justify.Center">
        @foreach (var doctor in doctors)
        {
            // Find the corresponding user for the doctor based on UID
            var user = users.FirstOrDefault(u => u.UID == doctor.DID);
            var userName = user?.UserName ?? "Unknown User"; // If no user found, show "Unknown User"

            // Construct the image path based on the doctor ID (assuming the image is named by DID)
            var doctorImagePath = $"/Images/Users/Doctors/{doctor.DID}.webp"; // Adjust the file extension and path as needed.

            <MudItem xs="12" sm="4" md="3">
                <MudCard Elevation="3" Class="ma-3" Style="width: 100%; display: flex; flex-direction: column; align-items: center; text-align: center; height: auto;">
                    <MudCardMedia Image="@doctorImagePath" Alt="@($"{userName}'s photo")" Style="width: 100px; height: 100px; object-fit: cover; border-radius: 50%;" />
                    <MudCardContent Style="text-align: center; margin-top: 1rem;">
                        <MudText Typo="Typo.h6">@userName</MudText>
                        <MudText Style="font-size: 0.85rem;">
                            @doctor.Degree
                        </MudText>
                        <MudText Style="font-size: 0.85rem;">
                            Level: @doctor.Level
                        </MudText>
                        <MudText Style="font-size: 0.85rem;">
                            Years of Experience: @doctor.WorkingYear
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Parameter]
    public int branchId { get; set; }

    [Parameter]
    public int departmentId { get; set; }

    private string departmentName = "Loading...";
    private List<Doctor> doctors = new List<Doctor>(); // Ensure it's initialized as an empty list
    private List<UserOutputDTO> users = new List<UserOutputDTO>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch doctors and users
            var doctorsResult = doctorService.GetDoctorByBrancDep(branchId, departmentId);
            var userRole = userService.GetUserByRole("doctor");

            if (doctorsResult != null)
            {
                doctors = doctorsResult.ToList(); // Assign to doctors
                users = userRole.ToList(); // Assign to users
            }
            else
            {
                doctors = new List<Doctor>(); // In case no doctors found, assign an empty list
                users = new List<UserOutputDTO>(); // Ensure users is also empty
            }

            // Set the department name (this may need to come from a service or API)
            departmentName = "Department Name"; // Set this dynamically if needed
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching doctors: {ex.Message}");
            doctors = new List<Doctor>(); // Ensure doctors is initialized even on error
            users = new List<UserOutputDTO>(); // Ensure users is initialized even on error
        }
    }
}
