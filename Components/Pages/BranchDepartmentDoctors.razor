@page "/BranchDepartmentDoctors/{branchId:int}/{departmentId:int}"
@inject IDoctorService doctorService
@inject IUserService userService
 

@if (doctors == null)
{
    <p>Loading doctors...</p>
}
else if (!doctors.Any())
{
    <p>No doctors found in this department.</p>
}
else
{
    <MudGrid Spacing="3" Justify="Justify.Center">
        @foreach (var doctor in doctors)
        {
            var user = users.FirstOrDefault(u => u.UID == doctor.DID);
            var userName = user?.UserName ?? "Unknown User";
            var doctorImagePath = $"/Images/Users/Doctors/{doctor.DID}.webp";

            <MudItem xs="12" sm="4" md="3">
                <MudCard Elevation="3" Class="ma-3" Style="width: 100%; display: flex; flex-direction: column; align-items: center; text-align: center; height: auto;">
                    <MudCardMedia Image="@doctorImagePath" Alt="@($"{userName}'s photo")" Style="width: 100px; height: 100px; object-fit: cover; border-radius: 50%;" />
                    <MudCardContent Style="text-align: center; margin-top: 1rem;">
                        <MudText Typo="Typo.h6">@userName</MudText>
                        <MudText Style="font-size: 0.85rem;">
                            @doctor.Degree
                        </MudText>
                        <MudText Style="font-size: 0.85rem;">
                            Level: @doctor.Level
                        </MudText>
                        <MudText Style="font-size: 0.85rem;">
                            Years of Experience: @doctor.WorkingYear
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Parameter]
    public int branchId { get; set; }

    [Parameter]
    public int departmentId { get; set; }

    private List<Doctor> doctors = new List<Doctor>();
    private List<UserOutputDTO> users = new List<UserOutputDTO>();

    protected override async Task OnInitializedAsync()
    {
        Logger.Information("Navigated to BranchDepartmentDoctors page for Branch ID: {BranchId} and Department ID: {DepartmentId} at {Time}", branchId, departmentId, DateTime.Now);

        try
        {
            Logger.Information("Fetching doctors for Branch ID: {BranchId} and Department ID: {DepartmentId} at {Time}", branchId, departmentId, DateTime.Now);
            var doctorsResult = doctorService.GetDoctorByBrancDep(branchId, departmentId);
            var userRole = userService.GetUserByRole("doctor");

            if (doctorsResult != null)
            {
                doctors = doctorsResult.ToList();
                Logger.Information("Successfully fetched doctors for Branch ID: {BranchId} and Department ID: {DepartmentId} at {Time}", branchId, departmentId, DateTime.Now);

                users = userRole.ToList();
                Logger.Information("Successfully fetched users with role 'doctor' at {Time}", DateTime.Now);
            }
            else
            {
                doctors = new List<Doctor>();
                users = new List<UserOutputDTO>();
                Logger.Warning("No doctors found for Branch ID: {BranchId} and Department ID: {DepartmentId} at {Time}", branchId, departmentId, DateTime.Now);
            }
        }
        catch (Exception ex)
        {
            Logger.Error("Error fetching doctors or users for Branch ID: {BranchId} and Department ID: {DepartmentId}. Error: {Error} at {Time}", branchId, departmentId, ex.Message, DateTime.Now);
            doctors = new List<Doctor>();
            users = new List<UserOutputDTO>();
        }
    }
}
