@page "/Department"
@inject NavigationManager NavigationManager
@inject IDepartmentService DepartmentService

<MudContainer MaxWidth="MaxWidth.Large" Class="my-5">
    <!-- Title -->
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4" Style="color: #33BEC8;">
        ATA Hospital Departments
    </MudText>

    <!-- Search Box -->
    <MudTextField T="string"
                  Placeholder="Search for Department"
                  ValueChanged="@OnSearchChanged"
                  Immediate="true"
                  Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Class="mb-5"
                  Variant="Variant.Filled"
                  Style="margin-bottom: 20px;" />

    <!-- Department Cards -->
    <MudGrid>
        @if (FilteredDepartments.Any())
        {
            @foreach (var department in FilteredDepartments)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Class="text-center" Style="height: 350px; display: flex; flex-direction: column; justify-content: space-between;">
                        <!-- Department Image -->
                        <div style="width: 120px; height: 120px; object-fit: cover; border-radius: 50%; margin: auto; overflow: hidden;">
                            <img src="@department.Image"
                                 alt="@department.DepartmentName"
                                 style="width: 100%; height: 100%;" />
                        </div>
                        <MudCardContent>
                            <MudText Typo="Typo.subtitle1" Style="color: #1B7D84;">@department.DepartmentName</MudText>
                            <MudText Typo="Typo.body1" Style="color: #33BEC8; text-align: center; margin-top: 8px;">
                                @ShortenDescription(department.Description)
                            </MudText>
                        </MudCardContent>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => NavigateToBranch(department.DepartmentId)">
                            View Details
                        </MudButton>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            <MudText Typo="Typo.body1" Align="Align.Center" Style="color: gray;">No departments found.</MudText>
        }
    </MudGrid>
</MudContainer>

@code {
    private string SearchQuery { get; set; } = string.Empty;
    private List<DepartmentViewModel> Departments { get; set; } = new();
    private List<DepartmentViewModel> FilteredDepartments { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch all departments
            var departmentDtos = DepartmentService.GetAllDepartments().ToList();

            // Map to ViewModel
            Departments = departmentDtos.Select(dept => new DepartmentViewModel
                {
                    DepartmentId = dept.DepId,
                    DepartmentName = dept.DepartmentName,
                    Description = dept.Description,
                    Image = $"/Images/IconDep/{dept.DepartmentName.ToLower().Replace(" ", "")}.png"
                }).ToList();

            // Initialize filtered list
            FilteredDepartments = new List<DepartmentViewModel>(Departments);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading departments: {ex.Message}");
        }
    }

    private void OnSearchChanged(string searchQuery)
    {
        SearchQuery = searchQuery;

        // Perform live filtering
        FilteredDepartments = string.IsNullOrWhiteSpace(SearchQuery)
            ? new List<DepartmentViewModel>(Departments)
            : Departments.Where(d => d.DepartmentName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                     d.Description.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
                         .ToList();
    }

    private void NavigateToBranch(int departmentId)
    {
        NavigationManager.NavigateTo($"/DepartmentBranch/{departmentId}");
    }

    private string ShortenDescription(string description)
    {
        // Shorten description to fit within the card
        const int maxLength = 80;
        if (description.Length > maxLength)
        {
            return description.Substring(0, maxLength) + "...";
        }
        return description;
    }

    private class DepartmentViewModel
    {
        public int DepartmentId { get; set; }
        public string DepartmentName { get; set; }
        public string Description { get; set; }
        public string Image { get; set; }
    }
}
