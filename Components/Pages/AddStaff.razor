@layout StaffLayout
@page "/AddStaff"
@inject IUserService userService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDoctorService doctorService
@inject IBranchService branchService
@inject IDepartmentService departmentService
@inject IBranchDepartmentService branchDepartmentService

<MudPaper Elevation="4" Class="form-container" Style="width: 100%; align-content:center;" Align="Align.Center">
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4" Style="color: #1B7D84;">
        Add New Staff
    </MudText>
    <MudForm Model="newStaffInput" @ref="form" Valid="isFormValid" OnValidSubmit="SubmitForm">
        <MudItem xs="12" Class="mb-4">
            <!-- Staff Name Input -->
            <MudTextField Label="Staff Name" @bind-Value="newStaffInput.UserName" Required="true" FullWidth="true" />
        </MudItem>
        <MudItem xs="12" Class="mb-4">
            <!-- Role Dropdown -->
            <MudSelect T="string" Label="Role" @bind-Value="newStaffInput.Role" Required="true" FullWidth="true">
                @foreach (var role in roles)
                {
                    <MudSelectItem T="string" Value="@role">@role</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" Class="mb-4">
            <!-- Phone Number Input -->
            <MudTextField Label="Phone Number" @bind-Value="newStaffInput.Phone" FullWidth="true" />
        </MudItem>

        <!-- Additional fields for Doctor -->
        @if (newStaffInput.Role == "Doctor")
        {
            <MudItem xs="12" Class="mb-4">
                <MudTextField Label="Degree" @bind-Value="doctorInput.Degree" FullWidth="true" />
            </MudItem>
            <MudItem xs="12" Class="mb-4">
                <MudTextField Label="Working Years" @bind-Value="doctorInput.WorkingYear" FullWidth="true" />
            </MudItem>
            <MudItem xs="12" Class="mb-4">
                <MudTextField Label="Level" @bind-Value="doctorInput.Level" FullWidth="true" />
            </MudItem>

            <!-- Branch Selection -->
            <MudSelect MultiSelectionTextFunc="GetMultiSelectionText" MultiSelection="true" @bind-Value="selectedBranches" T="string" Label="Branches" AdornmentIcon="@Icons.Material.Filled.Search">
                @foreach (var branch in branches)
                {
                    <MudSelectItem T="string" Value="@branch">@branch</MudSelectItem>
                }
            </MudSelect>

            <!-- Department Selection -->
            <MudItem xs="12" Class="mb-4">
                <MudSelect T="int" Label="Department" @bind-Value="selectedDepartment" FullWidth="true">
                    @foreach (var department in departments)
                    {
                        <MudSelectItem T="int" Value="@department.DepId" Style="font-size: 1rem; font-weight: bold; color: #1B7D84;">
                            @department.DepartmentName
                        </MudSelectItem>
                    }
                }
            </MudSelect>
        }

        <MudItem xs="12" Class="d-flex justify-space-between mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="!form.IsValid">
                Submit
            </MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="NavigateBack">
                Cancel
            </MudButton>
        </MudItem>
    </MudForm>
</MudPaper>

@code {
    private User newStaffInput = new();
    private DoctorInput doctorInput = new();
    private MudForm form;
    private bool isFormValid = false;
    private string[] roles = { "Admin", "Doctor" };
    private List<string> branches = new();
    private List<DepDTO> departments = new();
    private List<string> selectedBranches = new();
    private int selectedDepartment;

    protected override async Task OnInitializedAsync()
    {
        Log.Information("Navigated to Add Staff page at {Time}", DateTime.Now);
        try
        {
            branches = branchService.GetAllBranches().Select(b => b.BranchName).ToList();
            departments = departmentService.GetAllDepartments().ToList();

            if (!branches.Any())
            {
                Snackbar.Add("No branches found.", Severity.Warning);
                Log.Warning("No branches found at {Time}", DateTime.Now);
            }
            if (!departments.Any())
            {
                Snackbar.Add("No departments available.", Severity.Warning);
                Log.Warning("No departments available at {Time}", DateTime.Now);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
            Log.Error("Error loading data: {Error} at {Time}", ex.Message, DateTime.Now);
        }
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return selectedValues == null || !selectedValues.Any() ? "No branches selected" : string.Join(", ", selectedValues);
    }

    private async Task SubmitForm()
    {
        try
        {
            if (form.IsValid)
            {
                Log.Information("Adding new staff at {Time}", DateTime.Now);
                await userService.AddStaff(newStaffInput);

                if (newStaffInput.Role == "Doctor")
                {
                    doctorInput.DepID = selectedDepartment;
                    doctorService.AddDoctor(doctorInput);
                }

                Snackbar.Add("New staff member added successfully!", Severity.Success);
                NavigationManager.NavigateTo("/Staff");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding staff: {ex.Message}", Severity.Error);
            Log.Error("Error adding staff: {Error} at {Time}", ex.Message, DateTime.Now);
        }
    }

    private void NavigateBack() => NavigationManager.NavigateTo("/Staff");
}
