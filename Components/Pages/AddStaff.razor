@page "/BookAppointment/{patientId:int}"

@inject IClinicService ClinicService
@inject IBranchService BranchService
@inject IDepartmentService DepartmentService
@inject IBookingService BookingService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium" Class="my-5" Style="align-items:center; margin-top: 100px;">
    <MudText Typo="Typo.h4" Align="Align.Center" Style="color: #1B7D84;">
        Clinic Management
    </MudText>

    <MudCard Class="mt-5">
        <MudCardContent>
            <MudGrid>
                <!-- Select Branch -->
                <MudItem xs="12">
                    <MudText Typo="Typo.body1" Style="font-weight: bold; color: #1B7D84;">Select Branch</MudText>
                    <MudSelect T="Branch" @bind-Value="selectedBranch" Variant="Variant.Outlined" Clearable>
                        @foreach (var branch in branches)
                        {
                            <MudSelectItem T="Branch" Value="@branch" Style="font-size: 1rem; font-weight: bold;">
                                @branch.BranchName
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- Select Department -->
                <MudItem xs="12">
                    <MudText Typo="Typo.body1" Style="font-weight: bold; color: #1B7D84;">Select Department</MudText>
                    <MudSelect T="DepDTO" @bind-Value="selectedDepartment" Variant="Variant.Outlined" Clearable @onchange="OnDepartmentChanged">
                        @foreach (var department in departments)
                        {
                            <MudSelectItem T="DepDTO" Value="@department" Style="font-size: 1rem; font-weight: bold;">
                                @department.DepartmentName
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- Find Clinic Button -->
                <MudItem xs="12">
                    <div class="d-flex justify-center mt-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="FindClinic"
                                   Style="background-color: #1B7D84; color: white; font-size: 1rem; padding: 8px 16px;">
                            Find Clinic
                        </MudButton>
                    </div>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <!-- Appointments Section -->
    @if (clinicId != 0)
    {
        <h3>Appointments for Clinic @clinicId - @clinicName</h3>

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <MudText Typo="Typo.body1" Align="Align.Center" Style="color: #FF6B6B; margin-top: 20px;">
                @statusMessage
            </MudText>
        }
        else
        {
            <MudTable Items="@uniqueDates" Bordered="true">
                <ColGroup>
                    <col style="width: 150px;" /> <!-- Date column -->
                    @foreach (var time in uniqueTimes)
                    {
                        <col style="width: 100px;" /> <!-- Time columns -->
                    }
                </ColGroup>

                <HeaderContent>
                    <MudTh>Date</MudTh>
                    @foreach (var time in uniqueTimes)
                    {
                        <MudTh>@DateTime.Today.Add(time).ToString("hh:mm tt")</MudTh>
                    }
                </HeaderContent>

                <RowTemplate>
                    <MudTd>@context.ToString("dd/MM/yyyy")</MudTd>
                    @foreach (var time in uniqueTimes)
                    {
                        var appointment = appointments.FirstOrDefault(a => a.StartTime == time && a.Date.Date == context);

                        if (appointment == null)
                        {
                            <MudTd>--</MudTd>
                        }
                        else if (appointment.Staus)
                        {
                            <MudTd style="color: white; background-color: red;">Booked</MudTd>
                        }
                        else
                        {
                            <MudTd style="color: green; background-color: lightgreen;">Available</MudTd>
                        }
                    }
                </RowTemplate>

                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>

            <!-- Available Dates -->
            <MudText Typo="Typo.h6" Class="mt-4" Style="color: #1B7D84;">Select an Available Date</MudText>
            <MudSelect T="DateTime" @bind-Value="selectedDate" Variant="Variant.Outlined" Clearable>
                @foreach (var date in uniqueDates)
                {
                    <MudSelectItem T="DateTime" Value="@date">@date.ToString("dd/MM/yyyy")</MudSelectItem>
                }
            </MudSelect>

            <!-- Available Time Slots -->
            @if (selectedDate != default)
            {
                <MudText Typo="Typo.h6" Class="mt-4" Style="color: #1B7D84;">Select an Available Time Slot</MudText>
                <MudSelect T="TimeSpan" @bind-Value="selectedTime" Variant="Variant.Outlined" Clearable>
                    @foreach (var time in uniqueTimes)
                    {
                        if (!appointments.Any(a => a.Date.Date == selectedDate.Date && a.StartTime == time && a.Staus))
                        {
                            <MudSelectItem T="TimeSpan" Value="@time">@DateTime.Today.Add(time).ToString("hh:mm tt")</MudSelectItem>
                        }
                    }
                </MudSelect>
            }

            <!-- Selected Appointment -->
            @if (selectedDate != default && selectedTime != default)
            {
                <MudText Typo="Typo.body1" Class="mt-4" Style="color: #1B7D84;">
                    Selected Appointment: @selectedDate.ToString("dd/MM/yyyy") at @DateTime.Today.Add(selectedTime).ToString("hh:mm tt")
                </MudText>
            }

            <!-- Confirmation Button -->
            @if (selectedDate != default && selectedTime != default)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmAppointment"
                           Style="margin-top: 20px; background-color: #1B7D84; color: white;">
                    Confirm Appointment
                </MudButton>
            }
        }
    }
</MudContainer>

@code {
    [Parameter] public int patientId { get; set; }
    private List<Branch> branches = new List<Branch>();
    private List<DepDTO> departments = new List<DepDTO>();
    private Branch selectedBranch;
    private DepDTO selectedDepartment;

    private int clinicId = 0;
    private string clinicName = "";
    private IEnumerable<BookingOutputDTO> appointments = new List<BookingOutputDTO>();
    private List<TimeSpan> uniqueTimes = new List<TimeSpan>();
    private List<DateTime> uniqueDates = new List<DateTime>();
    private DateTime selectedDate;
    private TimeSpan selectedTime;
    private string statusMessage = string.Empty;

    protected override void OnInitialized()
    {
        try
        {
            branches = BranchService.GetAllBranches().ToList();
            departments = DepartmentService.GetAllDepartments().ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error fetching data: {ex.Message}", Severity.Error);
        }
    }

    private void OnDepartmentChanged(ChangeEventArgs e)
    {
        FindClinic();
    }

    private void FindClinic()
    {
        if (selectedBranch != null && selectedDepartment != null)
        {
            var clinics = ClinicService.GetClinicByBranchDep(selectedBranch.BID, selectedDepartment.DepId);
            if (clinics.Any())
            {
                var clinic = clinics.First();
                clinicId = clinic.CID;
                clinicName = clinic.ClincName;
                LoadAppointments();
            }
            else
            {
                statusMessage = "No clinic found for the selected branch and department.";
            }
        }
        else
        {
            statusMessage = "Please select both branch and department.";
        }
    }

    private async Task LoadAppointments()
    {
        try
        {
            appointments = BookingService.GetAllBooking().Where(a => a.CID == clinicId).ToList();

            if (appointments.Any())
            {
                uniqueDates = appointments.Select(a => a.Date).Distinct().OrderBy(d => d).ToList();
                uniqueTimes = appointments.Select(a => a.StartTime).Distinct().OrderBy(t => t).ToList();
                statusMessage = string.Empty;
            }
            else
            {
                statusMessage = "No appointments available for the selected clinic.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = "Error loading appointments. Please try again.";
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task ConfirmAppointment()
    {
        try
        {
            var bookingInput = new BookingInputDTO
                {
                    CID = clinicId,
                    Date = selectedDate,
                    StartTime = selectedTime
                };

            BookingService.BookAppointment(bookingInput, patientId);

            Snackbar.Add("Your appointment has been successfully booked!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error booking appointment: {ex.Message}", Severity.Error);
        }
    }
}
