@layout LoginLayout
@page "/SignIn"
@using System.ComponentModel.DataAnnotations

@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IAuthService authService

<div class="flex justify-center items-center h-screen">
    <div class="w-full max-w-md p-8 shadow-lg rounded-lg" style="background-color: #1B7D84;padding: 20px; align-items: center;">
        <!-- Logo -->
        <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 20px;">
            <img src="Images/logo.png" alt="Logo" style="height: 250px; width: 250px; border-block-style: dotted;" />
        </div>
        <h3 class="text-center text-2xl font-semibold mb-6" style="color: #B4DBDC;">Login</h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="my-4">
                <MudTextField Label="Email" @bind-Value="loginModel.Email" For="@(() => loginModel.Email)" 
                Variant="Variant.Outlined" FullWidth="true" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="my-4">
                <MudTextField Label="Password" @bind-Value="loginModel.Password" For="@(() => loginModel.Password)" 
                InputType="InputType.Password" Variant="Variant.Outlined" FullWidth="true" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <div class="flex justify-center mt-6">
                <MudButton Type="submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleLogin"
                Style="font-size: 1rem; background-color: #1B7D84;color: #B4DBDC; padding: 12px;">
                    Login
                </MudButton>
            </div>

            <div class="text-center mt-4">
                <a href="/signup" class="text-sm text-blue-600 hover:underline" style="color: #B4DBDC;">
                    Not registered? Sign up
                </a>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="text-red-500 mt-4 text-center">@errorMessage</div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="text-green-500 mt-4 text-center">@successMessage</div>
        }
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;
    private string? successMessage;

    private async Task HandleLogin()
    {
        Log.Information("Attempting login for email: {Email}", loginModel.Email);

        try
        {
            var authenticatedUser = UserService.AuthenticateUser(loginModel.Email, loginModel.Password);
            GlobalState.UID = authenticatedUser.UID;
            GlobalState.Name = authenticatedUser.UserName;
            GlobalState.IsAuthenticated = true;

            if (authenticatedUser == null)
            {
                errorMessage = "Login failed. Please check your credentials.";
                successMessage = null;
                Log.Warning("Login failed for email: {Email}. Invalid credentials.", loginModel.Email);
            }
            else
            {
                successMessage = "Login successful! Redirecting...";
                errorMessage = null;
                Log.Information("Login successful for user: {Email} with role: {Role}", authenticatedUser.Email, authenticatedUser.Role);

                authService.GenerateToken(authenticatedUser);

                if (authenticatedUser.Role == "Admin" || authenticatedUser.Role == "admin" || authenticatedUser.Role == "superAdmin")
                {
                    Log.Information("Redirecting admin user: {Email} to /StaffPage.", authenticatedUser.Email);
                    NavigationManager.NavigateTo($"/StaffPage/{authenticatedUser.UID}");
                }
                else if (authenticatedUser.Role == "Doctor" || authenticatedUser.Role == "doctor")
                {
                    Log.Information("Redirecting doctor user: {Email} to /DoctorPage/{DoctorId}.", authenticatedUser.Email);
                    NavigationManager.NavigateTo($"/DoctorPage/{authenticatedUser.UID}");
                   

                }
                else
                {
                    Log.Information("Redirecting user: {Email} to home page.", authenticatedUser.Email);
                    NavigationManager.NavigateTo($"/PatientPage/{authenticatedUser.UID}");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
            successMessage = null;
            Log.Error("An error occurred during login for email: {Email}. Error: {ErrorMessage}", loginModel.Email, ex.Message);
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }
}
