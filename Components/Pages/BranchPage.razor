@page "/BranchPage"
@inject IBranchService branchService
@inject NavigationManager Navigation

<h3>Branches</h3>

<MudText Typo="Typo.h6" Class="mud-width-full">
    @(selectedBranch == null ? "" : $"Branch: {selectedBranch.BranchName.ToUpper()}")
</MudText>

<MudSelect T="Branch" @bind-Value="selectedBranch" ToStringFunc="@converter" Variant="Variant.Outlined" Clearable>
    @if (branches != null)
    {
        @foreach (var branch in branches)
        {
            var backgroundColor = selectedBranch == branch ? "#33BEC8" : (hoveredBranch == branch ? "#33BEC8" : "#1B7D84");

            <MudSelectItem Value="branch"
                           @onmouseover="() => SetHoveredBranch(branch)"
                           @onmouseout="() => SetHoveredBranch(null)"
                           Style="@($"background-color: {backgroundColor}; color: white;")">
                @branch.BranchName.ToUpper()
            </MudSelectItem>
        }
    }
</MudSelect>

<MudGrid Spacing="3">
    <!-- Image Grid with Buttons for Navigation -->
    <MudItem xs="6">
        <MudImage Src="images/salalah.png" Height="250" Alt="Salalah Image" Elevation="25" Class="rounded-lg ma-4" />
    </MudItem>
    <MudItem xs="6">
        <MudImage Src="images/muscat.png" Height="250" Alt="Muscat Image" Elevation="25" Class="rounded-lg ma-4" />
    </MudItem>
    <MudItem xs="6">
        <MudImage Src="images/sohar.png" Height="250" Alt="Sohar Image" Elevation="25" Class="rounded-lg ma-4" />
    </MudItem>
    <MudItem xs="6">
        <MudImage Src="images/barka.png" Height="250" Alt="Barka Image" Elevation="25" Class="rounded-lg ma-4" />
    </MudItem>
</MudGrid>

@code {
    private Branch selectedBranch;
    private List<Branch> branches;
    private Branch hoveredBranch;  // Track the branch being hovered over

    protected override void OnInitialized()
    {
        try
        {
            branches = branchService.GetAllBranches().ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching branches: {ex.Message}");
        }
    }

    private void SetHoveredBranch(Branch branch)
    {
        // Set the hovered branch when mouse enters, or reset when mouse leaves
        hoveredBranch = branch;
    }

    private void ShowDetails(string branchName)
    {
        // Navigate to the corresponding page
        Navigation.NavigateTo(branchName);
    }

    Func<Branch, string> converter = branch => branch?.BranchName ?? "Find Branch";
}
