@page "/PatientRecords/{DoctorId:int}"
@layout DoctorLayout
@inject NavigationManager NavigationManager
@inject IPatientRecordService patientRecordService


<h3 style="color: #1B7D84;">Patient Records</h3>
<div class="d-flex justify-end" style="margin-bottom: 30px;">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToAddPatientRecord"
               Style="background-color: #1B7D84; color: white; font-size: 1rem; padding: 10px 10px;">
        Add New Patient Record
    </MudButton>
</div>
@if (loading)
{
    <div class="text-center" style="margin-top: 50px;">
        <MudProgressCircular Indeterminate="true" />
        <p>Loading patient records...</p>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger text-center" style="margin-top: 20px;">
        @errorMessage
    </div>
}
else if (!filteredPatientRecords.Any())
{
    <div class="alert alert-warning text-center" style="margin-top: 20px;">
        No records found for the given doctor.
    </div>
}
else
{


    <MudTextField T="string"
                  Placeholder="Search for Patient Record"
                  ValueChanged="@OnSearchChanged"
                  Immediate="true"
                  Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Class="mb-4"
                  Variant="Variant.Filled"
                  Style="margin-bottom: 20px;" />

    <MudTable Items="@filteredPatientRecords" Hover="true" SortLabel="Sort By" Style="width: 100%; margin-top: 50px;">
        <HeaderContent>
            <MudTh Style="background-color: #1B7D84; color: white; width: 10%;">Record ID</MudTh>
            <MudTh Style="background-color: #1B7D84; color: white; width: 20%;">Patient Name</MudTh>
            <MudTh Style="background-color: #1B7D84; color: white; width: 20%;">Doctor Name</MudTh>
            <MudTh Style="background-color: #1B7D84; color: white; width: 15%;">Visit Date</MudTh>
            <MudTh Style="background-color: #1B7D84; color: white; width: 15%;">Treatment</MudTh>
            <MudTh Style="background-color: #1B7D84; color: white; width: 10%;">Edit</MudTh>
            <MudTh Style="background-color: #1B7D84; color: white; width: 10%;">Delete</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Record ID" Style="background-color: #1B7D84; color: white; width: 10%;">@context.RecordId</MudTd>
            <MudTd DataLabel="Patient Name" Style="width: 20%;">@context.PatientName</MudTd>
            <MudTd DataLabel="Doctor Name" Style="width: 20%;">@context.DoctorName</MudTd>
            <MudTd DataLabel="Visit Date" Style="width: 15%;">@context.VisitDate.ToShortDateString()</MudTd>
            <MudTd DataLabel="Treatment" Style="width: 15%;">@context.Treatment</MudTd>
            <MudTd DataLabel="Edit" Style="width: 10%;">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="() => NavigateToEdit(context.RecordId)" />
            </MudTd>
            <MudTd DataLabel="Delete" Style="width: 10%;">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteRecord(context.RecordId)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    [Parameter]
    public int? DoctorId { get; set; }

    private IEnumerable<PatientRecordOutput> patientRecords = new List<PatientRecordOutput>();
    private IEnumerable<PatientRecordOutput> filteredPatientRecords = new List<PatientRecordOutput>();
    private string searchQuery = string.Empty;
    private bool loading = true;
    private string errorMessage = null;

    protected override async Task OnParametersSetAsync()
    {
        if (DoctorId == null)
        {
            errorMessage = "Invalid Doctor ID.";
            loading = false;
            return;
        }

        try
        {
            // Fetch records based on DoctorId
            // patientRecords = await Task.Run(() => patientRecordService.GetRecords(null, null, DoctorId.Value, null));
            // filteredPatientRecords = patientRecords;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private void OnSearchChanged(string search)
    {
        searchQuery = search;

        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredPatientRecords = patientRecords;
        }
        else
        {
            filteredPatientRecords = patientRecords.Where(r =>
                r.PatientName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                r.DoctorName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                r.Treatment.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private void NavigateToEdit(int recordId)
    {
        NavigationManager.NavigateTo($"/EditPatientRecord/{recordId}");
    }

    private void DeleteRecord(int recordId)
    {
        var recordToDelete = patientRecords.FirstOrDefault(r => r.RecordId == recordId);
        if (recordToDelete != null)
        {
            // Call service to delete the record
            patientRecords = patientRecords.Where(r => r.RecordId != recordId).ToList();
            filteredPatientRecords = patientRecords;
            StateHasChanged();
        }
    }

    private void NavigateToAddPatientRecord()
    {
        NavigationManager.NavigateTo($"/AddPatientRecord/{DoctorId}");
    }
}
