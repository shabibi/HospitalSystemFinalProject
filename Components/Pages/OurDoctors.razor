@page "/our_doctors"
@inject IUserService UserService
@inject IDoctorService DoctorService
@inject IDepartmentService DepartmentService

<MudContainer MaxWidth="MaxWidth.Large" Class="my-5">
    <!-- Title -->
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4" Style="color: #1B7D84;">
        Our Doctors
    </MudText>

    <!-- Search Box -->
    <MudTextField T="string"
                  Placeholder="Search for Doctor or Department"
                  ValueChanged="@OnSearchChanged"
                  Immediate="true"
                  Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Class="mb-5"
                  Variant="Variant.Filled"
                  Style="margin-bottom: 20px;" />

    <!-- Doctor Cards -->
    <MudGrid>
        @if (FilteredDoctors.Any())
        {
            @foreach (var doctor in FilteredDoctors)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Class="text-center">
                        <!-- Doctor Image -->
                        <div style="width: 120px; height: 120px; object-fit: cover; border-radius: 50%; margin: auto; overflow: hidden;">
                            <img src="@GetDoctorImage(doctor.Image, doctor.UID)"
                                 alt="@doctor.UserName"
                                 style="width: 100%; height: 100%;" />
                        </div>
                        <MudCardContent>
                            <MudText Typo="Typo.subtitle1" Style="color: #1B7D84;">@doctor.UserName</MudText>
                            <MudText Typo="Typo.body1" Style="color: #33BEC8;">
                                @CapitalizeWords(departmentNames[doctor.UID])
                            </MudText>
                        </MudCardContent>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="@(string.Format("/doctor_info/{0}", doctor.UID))">
                            Read More
                        </MudButton>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            <MudText Typo="Typo.body1" Align="Align.Center" Style="color: gray;">No doctors found.</MudText>
        }
    </MudGrid>
</MudContainer>

@code {
    private string SearchQuery { get; set; } = string.Empty;
    private List<UserOutputDTO> Doctors { get; set; } = new();
    private List<UserOutputDTO> FilteredDoctors { get; set; } = new();
    private Dictionary<int, string> departmentNames = new();

    protected override async Task OnInitializedAsync()
    {
        Log.Information("Initializing Our Doctors page at {Time}", DateTime.Now);

        try
        {
            // Fetch all doctors and departments
            var allDoctors = UserService.GetUserByRole("doctor");
            Doctors = allDoctors.Select(d => new UserOutputDTO
                {
                    UID = d.UID,
                    UserName = d.UserName,
                    Image = $"/Images/Users/Doctors/{d.UID}.webp"
                }).ToList();

            var departments = DepartmentService.GetAllDepartments().ToDictionary(d => d.DepId, d => d.DepartmentName);

            foreach (var doctor in Doctors)
            {
                var doctorEntity = DoctorService.GetDoctorById(doctor.UID);
                if (doctorEntity != null && doctorEntity.DepId > 0)
                {
                    departmentNames[doctor.UID] = departments.ContainsKey(doctorEntity.DepId)
                        ? departments[doctorEntity.DepId]
                        : "Unknown Department";
                }
                else
                {
                    departmentNames[doctor.UID] = "No Department Assigned";
                }
            }

            // Initialize filtered list
            FilteredDoctors = new List<UserOutputDTO>(Doctors);
            Log.Information("Successfully loaded {Count} doctors at {Time}", Doctors.Count, DateTime.Now);
        }
        catch (Exception ex)
        {
            Log.Error("Error loading doctors or departments: {Error} at {Time}", ex.Message, DateTime.Now);
        }
    }

    private void OnSearchChanged(string searchQuery)
    {
        Log.Information("Search query updated: {Query} at {Time}", searchQuery, DateTime.Now);

        SearchQuery = searchQuery;

        try
        {
            // Perform live filtering
            FilteredDoctors = string.IsNullOrWhiteSpace(SearchQuery)
                ? new List<UserOutputDTO>(Doctors)
                : Doctors.Where(d => d.UserName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                     (departmentNames.ContainsKey(d.UID) && departmentNames[d.UID].Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)))
                         .ToList();

            Log.Information("Filtered results: {Count} doctors found for query '{Query}' at {Time}", FilteredDoctors.Count, SearchQuery, DateTime.Now);
        }
        catch (Exception ex)
        {
            Log.Error("Error during search filtering: {Error} at {Time}", ex.Message, DateTime.Now);
        }
    }

    private string GetDoctorImage(string imagePath, int doctorId)
    {
        // Return default image if doctor image is null or empty
        if (string.IsNullOrEmpty(imagePath))
        {
            Log.Warning("No image found for doctor ID: {DoctorId} at {Time}", doctorId, DateTime.Now);
            return "/Images/Users/Doctors/maleDoctor.png";
        }

        return imagePath;
    }

    private string CapitalizeWords(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return input;

        var cultureInfo = System.Globalization.CultureInfo.CurrentCulture;
        return cultureInfo.TextInfo.ToTitleCase(input.ToLower());
    }
}
