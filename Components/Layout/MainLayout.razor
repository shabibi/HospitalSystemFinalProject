@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<div class="page d-flex flex-column" style="min-height: 100vh;margin-left: 0; margin-right: auto;">
    <MudAppBar Color="Color.Default" Fixed="true" Style="background-color: #1B7D84; justify-content:right;">
        <!-- Add a container to center content -->
        <div style="display: flex; justify-content: space-between; align-items: center; width: 100%; padding: 0 20px;">
            <!-- Left-aligned content (button and nav items) -->
            <div style="display: flex; align-items: center; gap: 20px;">
                <!-- Add gap for spacing between nav items -->
          
                <!-- Home NavLink -->
                <div class="nav-item px-3">
                    <NavLink class="nav-link d-flex align-items-center" href="/" Match="NavLinkMatch.All" style="color: white; font-weight: bold; padding: 0.5rem 1rem;">
                        <span class="bi bi-house-door-fill" aria-hidden="true" style="margin-right: 10px; font-size: 1.2rem; line-height: 1;"></span>
                        Home
                    </NavLink>
                </div>

                <!-- Our Doctor NavLink -->
                <div class="nav-item px-3">
                    <NavLink class="nav-link d-flex align-items-center" href="/our_doctors" style="color: white; font-weight: bold; padding: 0.5rem 1rem;">
                        <span class="bi bi-person-fill" aria-hidden="true" style="margin-right: 10px; font-size: 1.2rem; line-height: 1;"></span>
                        Our Doctor
                    </NavLink>
                </div>

                <!-- Branch NavLink -->
                <div class="nav-item px-3">
                    <NavLink class="nav-link d-flex align-items-center" href="/BranchPage" style="color: white; font-weight: bold; padding: 0.5rem 1rem;">
                        <span class="bi bi-building" aria-hidden="true" style="margin-right: 10px; font-size: 1.2rem; line-height: 1;"></span>
                        Branch
                    </NavLink>
                </div>

                <!-- Department NavLink -->
                <div class="nav-item px-3">
                    <NavLink class="nav-link d-flex align-items-center" href="/Department" style="color: white; font-weight: bold; padding: 0.5rem 1rem;">
                        <span class="bi bi-journal-bookmark-fill" aria-hidden="true" style="margin-right: 10px; font-size: 1.2rem; line-height: 1;"></span>
                        Department
                    </NavLink>
                </div>
                <MudButton OnClick="HandleSignInOut" Variant="Variant.Outlined" Style="color:azure; border-color: #1B7D84;">
                    @SignInOutText
                </MudButton>

            </div>

            <!-- Right-aligned content can be placed here, if necessary -->
        </div>
    </MudAppBar>
</div>

    <!-- Main Content Area -->
    <div class="main-content" style="flex: 1; padding: 1rem;">
        <!-- Main Article Section -->
        <main>
            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;

    private string SignInOutText = "Sign In";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            SignInOutText = "Sign Out";
        }
        else
        {
            SignInOutText = "Sign In";
        }
    }

    private async Task HandleSignInOut()
    {
        if (SignInOutText == "Sign Out")
        {
            await Logout();
            SignInOutText = "Sign In";
        }
        else
        {
            NavigationManager.NavigateTo("/SignIn");
        }
    }

    private async Task Logout()
    {
        Console.WriteLine("Logging out...");
        // Perform token clearing or logout logic here
        await Task.Delay(500); // Simulating async operation
    }
}
