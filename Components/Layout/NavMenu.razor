@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<div style="background: linear-gradient(to bottom, #1B7D84, #33BEC8); color: white; width: 250px; height: 100vh; padding: 0; display: flex; flex-direction: column; justify-content: space-between;">
    <!-- Centered Logo Image -->
    <div style="display: flex; justify-content: center; padding: 1rem;">
        <img src="/Images/logo.png" alt="Logo" style="max-width: 150px; max-height: 100px; object-fit: contain;" />
    </div>

  <!-- Display User Name if Logged In -->
@if (GlobalState.IsAuthenticated)
{
    <div class="user-name" style="margin-bottom: 1rem; font-size: 1.4rem; font-weight: bold; color: white; text-align: center; padding: 0.5rem;">
        Welcome, @GlobalState.Name
    </div>
}

    <!-- Navigation Menu Items -->
    <div class="nav-scrollable" style="flex-grow: 1;">
        <nav class="d-flex flex-column" style="width: 100%; padding: 0;">
            <!-- Home NavLink -->
            <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center" href="/" Match="NavLinkMatch.All" style="color: white; font-weight: bold; padding: 0.5rem 1rem;">
                    <span class="bi bi-house-door-fill" aria-hidden="true" style="margin-right: 10px; font-size: 1.2rem; line-height: 1;"></span>
                    Home
                </NavLink>
            </div>

            <!-- Our Doctor NavLink -->
            <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center" href="/our_doctors" style="color: white; font-weight: bold; padding: 0.5rem 1rem;">
                    <span class="bi bi-person-fill" aria-hidden="true" style="margin-right: 10px; font-size: 1.2rem; line-height: 1;"></span>
                    Our Doctors
                </NavLink>
            </div>

            <!-- Branch NavLink -->
            <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center" href="/BranchPage" style="color: white; font-weight: bold; padding: 0.5rem 1rem;">
                    <span class="bi bi-building" aria-hidden="true" style="margin-right: 10px; font-size: 1.2rem; line-height: 1;"></span>
                    Branch
                </NavLink>
            </div>

            <!-- Department NavLink -->
            <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center" href="/Department" style="color: white; font-weight: bold; padding: 0.5rem 1rem;">
                    <span class="bi bi-journal-bookmark-fill" aria-hidden="true" style="margin-right: 10px; font-size: 1.2rem; line-height: 1;"></span>
                    Department
                </NavLink>
            </div>

            <!-- Profile NavLink (only shown if logged in) -->
            @if (GlobalState.IsAuthenticated && GlobalState.UID > 0)
            {
                string profilePageUrl = GlobalState.Role?.ToLower() switch
                {
                    "patient" => $"/PatientPage/{GlobalState.UID}",
                    "doctor" => $"/DoctorPage/{GlobalState.UID}",
                    "staff" => $"/StaffPage/{GlobalState.UID}",
                    _ => "/"
                };

                <div class="nav-item px-3">
                    <NavLink class="nav-link d-flex align-items-center" href="@profilePageUrl" style="color: white; font-weight: bold; padding: 0.5rem 1rem;">
                        <span class="bi bi-person-circle" aria-hidden="true" style="margin-right: 10px; font-size: 1.2rem; line-height: 1;"></span>
                        Profile
                    </NavLink>
                </div>
            }

            <!-- Sign In/Sign Out Button -->
            <div class="nav-item px-3">
                <MudButton OnClick="HandleSignInOut" Variant="Variant.Outlined" Style="border-color: white; color: white; width: 100%;">
                    @SignInOutText
                </MudButton>
            </div>
        </nav>
    </div>
</div>

@code {
    private string SignInOutText = "Sign In"; // Default to Sign In
    private bool IsPatient = false; // Default to false

    protected override async Task OnInitializedAsync()
    {
        await UpdateAuthState();
    }

    private async Task UpdateAuthState()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            GlobalState.IsAuthenticated = true;
            GlobalState.Name = user.FindFirst("name")?.Value ?? "User"; // Default name
            GlobalState.UID = int.TryParse(user.FindFirst("id")?.Value, out int id) ? id : 0;
            GlobalState.Role = user.FindFirst("role")?.Value?.ToLower(); // Convert role to lowercase

            IsPatient = GlobalState.Role == "patient"; // Update IsPatient correctly
            SignInOutText = "Sign Out"; // Update button text

            Console.WriteLine($"✅ User Logged In: {GlobalState.IsAuthenticated}, Role: {GlobalState.Role}, UID: {GlobalState.UID}");
        }
        else
        {
            LogoutState(); // Reset all values if not logged in
        }

        StateHasChanged(); // Force UI update
    }

    private async Task HandleSignInOut()
    {
        if (GlobalState.IsAuthenticated)
        {
            await Logout();
        }
        else
        {
            NavigationManager.NavigateTo("/SignIn");
        }
    }

    private async Task Logout()
    {
        LogoutState();
        Console.WriteLine("🔴 User Logged Out");

        await Task.Delay(100); // Simulate async logout operation
        NavigationManager.NavigateTo("/"); // Redirect to home page
    }

    private void LogoutState()
    {
        GlobalState.IsAuthenticated = false;
        GlobalState.UID = 0;
        GlobalState.Name = null;
        GlobalState.Role = null;
        IsPatient = false; // Reset IsPatient to false after logout
        SignInOutText = "Sign In"; // Reset button text
    }
}
